# FROM scratch
# ADD hello /
# CMD ["/hello"]


## 1: Create an image with GIT installed
# FROM alpine:3.5
# RUN apk update
# RUN apk add git

## 2: Create an image with ADD instruction
# FROM alpine:3.5
# RUN apk update
# ADD http://www.vlsitechnology.org/pharosc_8.4.tar.gz .

## 3: Create an image with COPY instruction
# FROM nginx:alpine
# LABEL maintainer="Dhirendra"

# COPY index.html /usr/share/nginx/html/
# ENTRYPOINT ["nginx", "-g", "daemon off;"]

## 4: Multi-stage Build.
# FROM alpine AS stage1
# LABEL maintainer="Dhirendra"
# RUN echo "Welcome to Docker Labs!" > /opt/index.html

# FROM nginx:alpine
# LABEL maintainer="Dhirendra"
# COPY --from=stage1 /opt/index.html /usr/share/nginx/html/
# ENTRYPOINT ["nginx", "-g", "daemon off;"]

## NOTE: You can name your stages, by adding an AS to the FROM instruction.By default, the stages are not named, and you can refer to them by their integer number, starting with 0 for the first FROM instruction.You are not limited to copying from stages you created earlier in your Dockerfile, you can use the COPY --from instruction to copy from a separate image, either using the local image name, a tag available locally or on a Docker registry.


## 5: Create an image with CMD instruction

# FROM alpine:3.6
# RUN apk update
# CMD ["top"]
# /bin/sh -c 'ping localhost'.   #shell form
# CMD ["/bin/ping","localhost"]  # exec form

## 6: Create an image with ENTRYPOINT instruction
# Exec Form
# ENTRYPOINT [“executable”, “param1”, “param2”]
# Shell Form
# ENTRYPOINT command param1 param2

## If an image has an ENTRYPOINT, if you pass an argument to it, while running container it wont override the existing entrypoint, it will append what you passed with the entrypoint.To override the existing ENTRYPOINT you should use –entrypoint flag when running container.

# FROM alpine:3.5
# ENTRYPOINT ["/bin/echo", "Hi, your ENTRYPOINT instruction in Exec Form !"]
# ENTRYPOINT echo "Hi, your ENTRYPOINT instruction in Shell Form !"

# Whether you're using ENTRYPOINT or CMD (or both) the recommendation is to always use the exec form so that's it's obvious which command is running as PID 1 inside your container.

## 7: WORKDIR instruction

# FROM alpine:3.9.3

## Relative Path
# WORKDIR /opt
# RUN echo "Welcome to Docker Labs" > opt.txt
# WORKDIR folder1
# RUN echo "Welcome to Docker Labs" > folder1.txt
# WORKDIR folder2
# RUN echo "Welcome to Docker Labs" > folder2.txt

## An absolute path is defined as specifying the location of a file or directory from the root directory(/). In other words,we can say that an absolute path is a complete path from start of actual file system from / directory. Relative path is defined as the path related to the present working directly(pwd).

# WORKDIR /opt/folder1
# RUN echo "Welcome to Docker Labs" > opt.txt
# WORKDIR /var/tmp/

## 8: RUN instruction

# FROM alpine:3.9.3
# # RUN apk add --update 
# # RUN apk add curl
# # RUN rm -rf /var/cache/apk/
# RUN apk add --update && \
# 	apk add curl  && \  
# 	rm -rf /var/cache/apk/

## 8: Create an image with ARG instruction

# FROM alpine:3.9.3
# #Setting a default value to Argument WELCOME_USER
# ARG WELCOME_USER=Dhirendra
# RUN echo "Welcome $WELCOME_USER, to Docker World!" > message.txt
# CMD cat message.txt

## NOTE: ARG is the only one instruction which can come before FROM instruction, but then arg value can be used only by FROM.

## 9: ENV instruction
# FROM alpine:3.9.3
# ENV WELCOME_MESSAGE="Welcome to Docker World"

## 10: VOLUME instruction
# FROM nginx:alpine

# VOLUME /myvol
# CMD [ "nginx","-g","daemon off;" ]

## 11: EXPOSE instruction
# FROM nginx:alpine

# EXPOSE 80/tcp
# EXPOSE 80/udp

# CMD [ "nginx","-g","daemon off;" ]

## 12: LABEL Instruction # The LABEL instruction adds metadata to an image. A LABEL is a key-value pair. 

# LABEL "com.example.vendor"="ACME Incorporated"
# LABEL com.example.label-with-value="foo"
# LABEL version="1.0"
# LABEL description="This text illustrates \
# that label-values can span multiple lines."

## ONBUILD # https://dockerlabs.collabnix.com/beginners/dockerfile/onbuild.html

## 14: Create a Docker Image with HEALTHCHECK instruction.


## 17: USER Instruction under Dockerfile
# Of course, like WORKDIR, USER just helps you switch to the specified user. This user must be pre-established, otherwise it cannot be switched.

# RUN groupadd -r redis && useradd -r -g redis redis
# USER redis
# RUN [ "redis-server" ]